import React from 'react';

interface CodePreviewProps {
  // Props might include:
  // - htmlContent: string (for HTML/CSS/JS preview)
  // - markdownContent: string (for Markdown preview)
  // - previewType: 'html' | 'markdown' | 'none'
}

const previewContainerStyle: React.CSSProperties = {
  flexGrow: 1, // If it's meant to take significant space
  padding: '10px',
  borderTop: '1px solid #eee', // Separator from FileViewer or other components
  overflowY: 'auto',
  backgroundColor: '#fff', // Usually white for content preview
};

const iframeStyle: React.CSSProperties = {
  width: '100%',
  height: '98%', // Adjust as needed, consider parent padding
  border: '1px solid #ccc', // Border for the iframe itself
  borderRadius: '4px',
};

export const CodePreview: React.FC<CodePreviewProps> = (/* { htmlContent, markdownContent, previewType } */) => {
  // This is a placeholder. Actual implementation will depend on how
  // the Gemini CLI / Agent provides content for preview.
  // For example, if the agent generates HTML, it might send it to the UI.

  // Example: Simulate receiving HTML content
  const htmlContentExample = `
    <html>
      <head>
        <style>
          body { font-family: sans-serif; background-color: #f0f0f0; padding: 15px; }
          h1 { color: navy; }
          p { color: #333; }
        </style>
      </head>
      <body>
        <h1>Live Preview Example</h1>
        <p>This is some HTML content generated by the assistant.</p>
        <button onclick="alert('Hello from preview!')">Click Me</button>
      </body>
    </html>
  `;
  const previewType = 'html'; // Simulate HTML preview

  return (
    <div style={previewContainerStyle}>
      <h5 style={{ marginTop: 0, marginBottom: '10px' }}>Live Preview / Output</h5>
      {previewType === 'none' && (
        <p style={{ color: '#888', textAlign: 'center' }}>No preview available.</p>
      )}
      {previewType === 'html' && htmlContentExample && (
        <iframe
          srcDoc={htmlContentExample}
          style={iframeStyle}
          title="Live Code Preview"
          sandbox="allow-scripts allow-same-origin" // Security for iframe
        />
      )}
      {/*
      {previewType === 'markdown' && markdownContent && (
        // Using a library like react-markdown or marked
        // <ReactMarkdown>{markdownContent}</ReactMarkdown>
        <div style={{border: '1px solid #eee', padding: '10px', borderRadius: '4px'}}>
            Rendered Markdown would go here.
        </div>
      )}
      */}
       {!htmlContentExample && previewType !== 'none' && (
         <p style={{ color: '#888', textAlign: 'center' }}>Waiting for preview content...</p>
       )}
    </div>
  );
};
